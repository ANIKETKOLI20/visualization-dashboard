{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anike\\\\mern-stack-projects\\\\visualization-dashboard\\\\frontend\\\\src\\\\pages\\\\InsightsChart\\\\InsightsChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport { Container, Paper, Typography, CircularProgress } from '@mui/material';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport './InsightsChart.css';\n\n// Register necessary components with Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\n// InsightsChart component definition\nconst InsightsChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n\n  // Fetch data from API on component mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch data from the API endpoint\n        const response = await axios.get('http://localhost:5000/insights');\n        const insights = response.data;\n        if (Array.isArray(insights)) {\n          // Aggregate data by sector\n          const sectorIntensityMap = insights.reduce((acc, insight) => {\n            if (!acc[insight.sector]) {\n              acc[insight.sector] = 0;\n            }\n            acc[insight.sector] += insight.intensity;\n            return acc;\n          }, {});\n\n          // Extract sectors and intensities for chart\n          const sectors = Object.keys(sectorIntensityMap);\n          const intensities = Object.values(sectorIntensityMap);\n\n          // Update chart data state\n          setChartData({\n            labels: sectors,\n            datasets: [{\n              label: 'Intensity',\n              data: intensities,\n              backgroundColor: 'rgba(75, 192, 192, 0.6)'\n            }]\n          });\n        } else {\n          console.error('Fetched insights data is not an array:', insights);\n        }\n      } catch (error) {\n        console.error('Error fetching insights data:', error.message);\n      }\n    };\n\n    // Call fetchData function on component mount\n    fetchData();\n  }, []);\n\n  // Render the InsightsChart component\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"chart-container\",\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      className: \"chart-paper\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        component: \"h2\",\n        children: \"Sector Intensity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), chartData.labels ?\n      /*#__PURE__*/\n      // Render Bar chart if chartData.labels is available\n      _jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Render CircularProgress if chartData.labels is not available\n      _jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(InsightsChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = InsightsChart;\nexport default InsightsChart;\nvar _c;\n$RefreshReg$(_c, \"InsightsChart\");","map":{"version":3,"names":["React","useEffect","useState","axios","Bar","Container","Paper","Typography","CircularProgress","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","InsightsChart","_s","chartData","setChartData","fetchData","response","get","insights","data","Array","isArray","sectorIntensityMap","reduce","acc","insight","sector","intensity","sectors","Object","keys","intensities","values","labels","datasets","label","backgroundColor","console","error","message","className","children","elevation","variant","component","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","scales","y","beginAtZero","_c","$RefreshReg$"],"sources":["C:/Users/anike/mern-stack-projects/visualization-dashboard/frontend/src/pages/InsightsChart/InsightsChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Container, Paper, Typography, CircularProgress } from '@mui/material';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\nimport './InsightsChart.css';\r\n\r\n// Register necessary components with Chart.js\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\n// InsightsChart component definition\r\nconst InsightsChart = () => {\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  // Fetch data from API on component mount\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch data from the API endpoint\r\n        const response = await axios.get('http://localhost:5000/insights');\r\n        const insights = response.data;\r\n\r\n        if (Array.isArray(insights)) {\r\n          // Aggregate data by sector\r\n          const sectorIntensityMap = insights.reduce((acc, insight) => {\r\n            if (!acc[insight.sector]) {\r\n              acc[insight.sector] = 0;\r\n            }\r\n            acc[insight.sector] += insight.intensity;\r\n            return acc;\r\n          }, {});\r\n\r\n          // Extract sectors and intensities for chart\r\n          const sectors = Object.keys(sectorIntensityMap);\r\n          const intensities = Object.values(sectorIntensityMap);\r\n\r\n          // Update chart data state\r\n          setChartData({\r\n            labels: sectors,\r\n            datasets: [\r\n              {\r\n                label: 'Intensity',\r\n                data: intensities,\r\n                backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n              }\r\n            ]\r\n          });\r\n        } else {\r\n          console.error('Fetched insights data is not an array:', insights);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching insights data:', error.message);\r\n      }\r\n    };\r\n\r\n    // Call fetchData function on component mount\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Render the InsightsChart component\r\n  return (\r\n    <Container className=\"chart-container\">\r\n      <Paper elevation={3} className=\"chart-paper\">\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Sector Intensity\r\n        </Typography>\r\n        {chartData.labels ? (\r\n          // Render Bar chart if chartData.labels is available\r\n          <Bar\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              scales: {\r\n                y: { beginAtZero: true }\r\n              }\r\n            }}\r\n          />\r\n        ) : (\r\n          // Render CircularProgress if chartData.labels is not available\r\n          <div className=\"loading-container\">\r\n            <CircularProgress />\r\n          </div>\r\n        )}\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InsightsChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}